Объектно-ориентированное программирование (ООП) -
это парадигма программирования, в которой фокус находится на объектах и их взаимодействии, а не на алгоритмах и процедурах.
В ООП объекты моделируют реальные объекты в мире и содержат данные (свойства) и действия (методы),
которые могут быть выполнены над этими данными.


Основные принципы ООП: инкапсуляция, наследование, полиморфизм.
Инкапсуляция означает сокрытие деталей реализации от пользователя,
наследование позволяет создавать новые классы, которые наследуют свойства и методы родительских классов,
а полиморфизм позволяет использовать объекты разных типов с одинаковыми интерфейсами.

-----------------------------------------------------------------------------------------------------------------------

В Python, ООП (Объектно-Ориентированное Программирование) основано на концепции классов и объектов.

1) Определение класса: Определяете класс с помощью ключевого слова class. Внутри класса вы можете определить методы и атрибуты.

class Dog:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def bark(self):
        print("Woof!")

-----------------------------------------------------------------------------------------------------------------------

2) Создание экземпляра класса: Создаете экземпляр класса, вызывая конструктор класса с помощью скобок.

dog = Dog("Rocky", 3)

-----------------------------------------------------------------------------------------------------------------------

3) Использование атрибутов и методов объекта: Обращаетесь к атрибутам и методам объекта через точку.

print(dog.name)
dog.bark()

-----------------------------------------------------------------------------------------------------------------------

4) Наследование: Вы можете создать новый класс, который наследует все атрибуты и методы родительского класса.

class GoldenRetriever(Dog):
    def fetch(self):
        print("Fetching!")